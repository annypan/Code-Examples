{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Developer/courses/CIS-557/Code-Examples/react/spa_snapshot_testing/weatherappspa/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Link, Route, useHistory } from 'react-router-dom';\nimport { getWeather } from './getData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction WeatherApp() {\n  _s();\n\n  const cities = ['Philadelphia', 'Boston', 'Mumbai', 'Dakar', 'Shanghai', 'London'];\n  const [city, setCity] = useState('');\n  const history = useHistory();\n  useEffect(() => {\n    // Bookmarks and shared links\n    // Use the URL to restore the app state\n    const url = window.location.href;\n    let urlCity = '';\n\n    if (url.split('/').length === 4) {\n      urlCity = url.split('/').pop();\n    }\n\n    let location = city;\n\n    if (urlCity !== '' && city === '') {\n      location = urlCity;\n    }\n\n    if (location !== '') {\n      getWeather(location).then(response => {\n        const pCity = document.getElementById('city');\n        pCity.innerHTML = `City: ${location}`;\n        const pDesc = document.getElementById('desc');\n        pDesc.innerHTML = `Weather: ${response.weather[0].description}`;\n        const pTemp = document.getElementById('temp');\n        pTemp.innerHTML = `Temp: ${response.main.temp}`;\n      });\n    }\n  }, [city]);\n\n  const updateCity = loc => {\n    if (loc) {\n      // update city triggered by a click on a link\n      const clicked = String(loc.target).split('/').pop();\n      setCity(clicked);\n    } else {\n      // homepage + button\n      // Lecture Activity: update city triggered by a button click (search box)\n      // Update the URL in the address bar to be /{the_city}\n      history.push(\"/\" + city);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"inpt\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          id: \"btn\",\n          onClick: () => updateCity(),\n          children: \"OK\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Cities\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"nav\", {\n          children: /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: cities.map(loc => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: /*#__PURE__*/_jsxDEV(Link, {\n                to: `/${loc}`,\n                onClick: anchor => updateCity(anchor),\n                children: loc\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 58,\n                columnNumber: 31\n              }, this)\n            }, loc, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"article\", {\n          children: /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/:loc\",\n            render: () => /*#__PURE__*/_jsxDEV(WeatherBox, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 48\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n\n_s(WeatherApp, \"YkG1+snxQ/QSxH0svO3MazRAs68=\", false, function () {\n  return [useHistory];\n});\n\n_c = WeatherApp;\n\nconst WeatherBox = () => /*#__PURE__*/_jsxDEV(\"div\", {\n  children: /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: [/*#__PURE__*/_jsxDEV(\"li\", {\n      id: \"city\",\n      children: [' ', \"City:\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n      id: \"temp\",\n      children: [' ', \"Temp:\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n      id: \"desc\",\n      children: [' ', \"Current Weather:\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 73,\n  columnNumber: 3\n}, this);\n\n_c2 = WeatherBox;\nexport default WeatherApp;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"WeatherApp\");\n$RefreshReg$(_c2, \"WeatherBox\");","map":{"version":3,"sources":["/Users/mac/Developer/courses/CIS-557/Code-Examples/react/spa_snapshot_testing/weatherappspa/src/App.js"],"names":["React","useState","useEffect","BrowserRouter","Router","Link","Route","useHistory","getWeather","WeatherApp","cities","city","setCity","history","url","window","location","href","urlCity","split","length","pop","then","response","pCity","document","getElementById","innerHTML","pDesc","weather","description","pTemp","main","temp","updateCity","loc","clicked","String","target","push","map","anchor","WeatherBox"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,aAAa,IAAIC,MAA1B,EAAkCC,IAAlC,EAAwCC,KAAxC,EAA+CC,UAA/C,QAAiE,kBAAjE;AACA,SAASC,UAAT,QAA2B,WAA3B;;;AAEA,SAASC,UAAT,GAAsB;AAAA;;AACpB,QAAMC,MAAM,GAAG,CAAC,cAAD,EAAiB,QAAjB,EAA2B,QAA3B,EAAqC,OAArC,EAA8C,UAA9C,EAA0D,QAA1D,CAAf;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAMY,OAAO,GAAGN,UAAU,EAA1B;AAEAL,EAAAA,SAAS,CAAC,MAAM;AACd;AACA;AACA,UAAMY,GAAG,GAAGC,MAAM,CAACC,QAAP,CAAgBC,IAA5B;AACA,QAAIC,OAAO,GAAG,EAAd;;AACA,QAAIJ,GAAG,CAACK,KAAJ,CAAU,GAAV,EAAeC,MAAf,KAA0B,CAA9B,EAAiC;AAC/BF,MAAAA,OAAO,GAAGJ,GAAG,CAACK,KAAJ,CAAU,GAAV,EAAeE,GAAf,EAAV;AACD;;AACD,QAAIL,QAAQ,GAAGL,IAAf;;AACA,QAAIO,OAAO,KAAK,EAAZ,IAAkBP,IAAI,KAAK,EAA/B,EAAmC;AACjCK,MAAAA,QAAQ,GAAGE,OAAX;AACD;;AACD,QAAIF,QAAQ,KAAK,EAAjB,EAAqB;AACnBR,MAAAA,UAAU,CAACQ,QAAD,CAAV,CAAqBM,IAArB,CAA2BC,QAAD,IAAc;AACtC,cAAMC,KAAK,GAAGC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAd;AACAF,QAAAA,KAAK,CAACG,SAAN,GAAmB,SAAQX,QAAS,EAApC;AACA,cAAMY,KAAK,GAAGH,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAd;AACAE,QAAAA,KAAK,CAACD,SAAN,GAAmB,YAAWJ,QAAQ,CAACM,OAAT,CAAiB,CAAjB,EAAoBC,WAAY,EAA9D;AACA,cAAMC,KAAK,GAAGN,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAd;AACAK,QAAAA,KAAK,CAACJ,SAAN,GAAmB,SAAQJ,QAAQ,CAACS,IAAT,CAAcC,IAAK,EAA9C;AACD,OAPD;AAQD;AACF,GAtBQ,EAsBN,CAACtB,IAAD,CAtBM,CAAT;;AAwBA,QAAMuB,UAAU,GAAIC,GAAD,IAAS;AAC1B,QAAIA,GAAJ,EAAS;AACP;AACA,YAAMC,OAAO,GAAGC,MAAM,CAACF,GAAG,CAACG,MAAL,CAAN,CAAmBnB,KAAnB,CAAyB,GAAzB,EAA8BE,GAA9B,EAAhB;AACAT,MAAAA,OAAO,CAACwB,OAAD,CAAP;AACD,KAJD,MAIO;AAAE;AACP;AACA;AACAvB,MAAAA,OAAO,CAAC0B,IAAR,CAAa,MAAM5B,IAAnB;AACD;AACF,GAVD;;AAYA,sBACE,QAAC,MAAD;AAAA,2BACE;AAAA,8BACE;AAAA,gCACE;AAAO,UAAA,IAAI,EAAC,MAAZ;AAAmB,UAAA,EAAE,EAAC;AAAtB;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAsB,UAAA,EAAE,EAAC,KAAzB;AAA+B,UAAA,OAAO,EAAE,MAAMuB,UAAU,EAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAKE;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA,iCACE;AAAA,sBACGxB,MAAM,CAAC8B,GAAP,CAAYL,GAAD,iBACV;AAAA,qCAAc,QAAC,IAAD;AAAM,gBAAA,EAAE,EAAG,IAAGA,GAAI,EAAlB;AAAqB,gBAAA,OAAO,EAAGM,MAAD,IAAYP,UAAU,CAACO,MAAD,CAApD;AAAA,0BAA+DN;AAA/D;AAAA;AAAA;AAAA;AAAA;AAAd,eAASA,GAAT;AAAA;AAAA;AAAA;AAAA,oBADD;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAFF,eAUE;AAAA,iCACE,QAAC,KAAD;AAAO,YAAA,IAAI,EAAC,OAAZ;AAAoB,YAAA,MAAM,EAAE,mBAAO,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAnC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAVF;AAAA;AAAA;AAAA;AAAA;AAAA,cALF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAwBD;;GAjEQ1B,U;UAGSF,U;;;KAHTE,U;;AAmET,MAAMiC,UAAU,GAAG,mBACjB;AAAA,yBACE;AAAA,4BACE;AAAI,MAAA,EAAE,EAAC,MAAP;AAAA,iBACG,GADH;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAKE;AAAI,MAAA,EAAE,EAAC,MAAP;AAAA,iBACG,GADH;AAAA;AAAA;AAAA;AAAA;AAAA,YALF,eASE;AAAI,MAAA,EAAE,EAAC,MAAP;AAAA,iBACG,GADH;AAAA;AAAA;AAAA;AAAA;AAAA,YATF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,QADF;;MAAMA,U;AAmBN,eAAejC,UAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Link, Route, useHistory } from 'react-router-dom';\nimport { getWeather } from './getData';\n\nfunction WeatherApp() {\n  const cities = ['Philadelphia', 'Boston', 'Mumbai', 'Dakar', 'Shanghai', 'London'];\n  const [city, setCity] = useState('');\n  const history = useHistory();\n\n  useEffect(() => {\n    // Bookmarks and shared links\n    // Use the URL to restore the app state\n    const url = window.location.href;\n    let urlCity = '';\n    if (url.split('/').length === 4) {\n      urlCity = url.split('/').pop();\n    }\n    let location = city;\n    if (urlCity !== '' && city === '') {\n      location = urlCity;\n    }\n    if (location !== '') {\n      getWeather(location).then((response) => {\n        const pCity = document.getElementById('city');\n        pCity.innerHTML = `City: ${location}`;\n        const pDesc = document.getElementById('desc');\n        pDesc.innerHTML = `Weather: ${response.weather[0].description}`;\n        const pTemp = document.getElementById('temp');\n        pTemp.innerHTML = `Temp: ${response.main.temp}`;\n      });\n    }\n  }, [city]);\n\n  const updateCity = (loc) => {\n    if (loc) {\n      // update city triggered by a click on a link\n      const clicked = String(loc.target).split('/').pop();\n      setCity(clicked);\n    } else { // homepage + button\n      // Lecture Activity: update city triggered by a button click (search box)\n      // Update the URL in the address bar to be /{the_city}\n      history.push(\"/\" + city);\n    }\n  };\n\n  return (\n    <Router>\n      <div>\n        <header>\n          <input type=\"text\" id=\"inpt\" />\n          <button type=\"button\" id=\"btn\" onClick={() => updateCity()}>OK</button>\n        </header>\n        <section>\n          <h1>Cities</h1>\n          <nav>\n            <ul>\n              {cities.map((loc) => (\n                <li key={loc}><Link to={`/${loc}`} onClick={(anchor) => updateCity(anchor)}>{loc}</Link></li>\n              ))}\n            </ul>\n          </nav>\n\n          <article>\n            <Route path=\"/:loc\" render={() => (<WeatherBox />)} />\n          </article>\n        </section>\n      </div>\n    </Router>\n  );\n}\n\nconst WeatherBox = () => (\n  <div>\n    <ul>\n      <li id=\"city\">\n        {' '}\n        City:\n      </li>\n      <li id=\"temp\">\n        {' '}\n        Temp:\n      </li>\n      <li id=\"desc\">\n        {' '}\n        Current Weather:\n      </li>\n    </ul>\n  </div>\n);\n\nexport default WeatherApp;\n"]},"metadata":{},"sourceType":"module"}